x <- 1:6
y <- c(20,20,20,8,8,8)
plot(x,y,xlim = c(0,6),ylim = c(0,30))
x <- 1:6
y <- c(20,20,20,8,8,8)
plot(x,y,xlim = c(0,6),ylim = c(0,30),typ='l')
x <- 1:6
y <- c(20,20,20,8,8,8)
plot(x,y,xlim = c(0,6),ylim = c(0,30),typ='l')
points(x,y)
wd_string <- getwd
wd_string <- getwd()
library(ggplot2)
example$dog_difference <- rnorm(n = 40, mean = 0, sd = .1)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
dog_category <- rep(1, 0:20)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
dog_category[0:20] <- rep(1, 20)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
dog_category[0:20] <- rep(1, 20)
dog_category[21:40] <- rep(0, 20)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
dog_category[0:20] <- rep(1, 20)
dog_category[21:40] <- rep(0, 20)
dog_example <- list(dog_difference,dog_category)
View(dog_example)
library(ggplot2)
dog_difference<- rnorm(n = 40, mean = 0, sd = .1)
dog_category <- rep(NaN,40)
dog_category[0:20] <- rep(1, 20)
dog_category[21:40] <- rep(0, 20)
dog_example <- data.frame(dog_difference,dog_category)
install.packages("DT")
install.packages("xaringan")
knit_with_parameters("C:/Users/Jeff/Dropbox/10C/lectures/lec-1.Rmd")
install.packages("xaringanExtra")
install.packages("xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
install.packages("devtools")
devtools::install_github("gadenbuie/xaringanExtra")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("gadenbuie/xaringanExtra")
rbern(10,.8)
library(Rlab)
rbern(10,.8)
library(Rlab)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
library(Rlab)
rate80 <- rbern(10,.8)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
library(Rlab)
rate80 <- rbern(10,.8)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
rate50 <- rbern(10,.5)
while(sum(rate50)!=5){
rate50 <- rbern(10,.5)
}
rate20 <- rbern(10,.2)
while(sum(rate20)!=2){
rate20 <- rbern(10,.2)
}
sum(rate20)
sum(rate50)
sum(rate80)
WinOrder <- c(rate80,rate20,rate50)
library(Rlab)
rate80 <- rbern(10,.8)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
rate50 <- rbern(10,.5)
while(sum(rate50)!=5){
rate50 <- rbern(10,.5)
}
rate20 <- rbern(10,.2)
while(sum(rate20)!=2){
rate20 <- rbern(10,.2)
}
WinOrder <- cbind(rate80,rate20,rate50)
View(WinOrder)
library(Rlab)
rate80 <- rbern(10,.8)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
rate50 <- rbern(10,.5)
while(sum(rate50)!=5){
rate50 <- rbern(10,.5)
}
rate20 <- rbern(10,.2)
while(sum(rate20)!=2){
rate20 <- rbern(10,.2)
}
WinOrder <- cbind(rate80,rate20,rate50)
rate_names <- c('rate80','rate20','rate50')
WinOrder <- data.frame(WinOrder)
colnames(WinOrder) <- rate_names
library(Rlab)
rate80 <- rbern(10,.8)
while(sum(rate80)!=8){
rate80 <- rbern(10,.8)
}
rate50 <- rbern(10,.5)
while(sum(rate50)!=5){
rate50 <- rbern(10,.5)
}
rate20 <- rbern(10,.2)
while(sum(rate20)!=2){
rate20 <- rbern(10,.2)
}
WinOrder <- cbind(rate80,rate20,rate50)
rate_names <- c('rate80','rate20','rate50')
WinOrder <- data.frame(WinOrder)
colnames(WinOrder) <- rate_names
write.csv(WinOrder,'WinOrder.csv')
options(htmltools.dir.version = FALSE)
mean_test <- memory %>%
summarise("mean" = mean(correct))
## calculate mean of all the data
mean_test <- memory %>%
summarise("mean" = mean(correct))
mean(correct)
mean(memory$correct)
options(htmltools.dir.version = FALSE)
xaringanExtra::use_tile_view()
xaringanExtra::use_fit_screen()
xaringanExtra::use_extra_styles(
hover_code_line = TRUE,         #<<
mute_unhighlighted_code = TRUE  #<<
)
htmltools::tagList(
xaringanExtra::use_clipboard(
button_text = "<i class=\"fa fa-clipboard\"></i>",
success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
error_text = "<i class=\"fa fa-times-circle\" style=\"color: #F94144\"></i>"
),
rmarkdown::html_dependency_font_awesome()
)
library(tidyverse)
library(flipbookr)
knitr::opts_chunk$set(fig.width = 6, message = FALSE,
warning = FALSE, comment = "",
cache = F)
link <- "https://raw.githubusercontent.com/jcoon1/Psych10C/main/data/week-1/example.csv"
memory <- read_csv(file = link)
memory <- memory %>%
mutate("test_id" = ifelse(test = time_test == 300,
yes = "test_1", no = "test_2"))
curve(dnorm(x, mean = 0, sd = 1), from = -4, to = 4,
ann = FALSE, axes = FALSE, lwd = 2, col = "#1b2021")
axis(1, at = seq(-4,4), cex.axis = 1.3)
axis(1, at = c(-1,1), labels = c(expression(mu-sigma),
expression(mu+sigma)),
col.axis = "#eb861e",
padj = 2, cex.axis = 1.5)
axis(1, at = 0, labels = expression(mu),
col.axis = "#6da7de",
padj = 2, cex.axis = 1.5)
abline(v = seq(-1,1), col = c("#eb861e","#6da7de","#eb861e"),
lwd = 2, lty = c(3,1,3))
box(bty = "l")
## calculate mean of all the data
mean_test <- memory %>%
summarise("mean" = mean(correct))
print(mean_test)
memory <- memory %>%
mutate("null_pred" = mean_test$mean[1])
memory <- memory %>%
mutate("null_error" = (null_pred - correct)^2)
# look at the first 4 rows of the data
head(x = memory, n = 4)
options(htmltools.dir.version = FALSE)
link <- "https://raw.githubusercontent.com/jcoon1/Psych10C/main/data/week-1/stroop.csv"
library(tidyverse)
stroop <- read_csv(file = link)
mean_resp <- stroop %>%
group_by(condition) %>%
summarise("av" = mean(response_time))
# In this code chunk you can write the function (or functions) that you need to
# calculate the mean of the INCONGRUENT condition. Remember to save the result
# in a new variable so that you can easily insert it in text. Remember to delete
# the comments inside the code chunks.
var_resp <- stroop %>%
group_by(condition) %>%
summarise("variance" = var(response_time))
ggplot(data = stroop) +
aes(x = response_time) +
aes(fill = condition, color = condition) +
geom_histogram(position="identity",
binwidth = 4,
alpha = 0.4) +
theme_classic() +
xlab("Response time (sec)") +
ylab("Frequency") +
guides(fill = guide_legend("Condition"), color = "none") +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
# In this chunk you should write (a.k.a. copy from the slides) the code needed
# to load the data for the second part of the example.
link_wide <- "https://raw.githubusercontent.com/jcoon1/Psych10C/main/data/week-1/stroop-wide.csv"
stroop_wide <- read_csv(file = link_wide)
# First we get our new variable
stroop_wide <- stroop_wide %>%
mutate(difference = control - incongruent)
# Now we can calculate the average improvement between conditions
mean_improve <- stroop_wide %>%
summarise(average = mean(difference)) %>%
pull(average)
# To calculate the variance we use the following code
var_improve <- stroop_wide %>%
summarise(variation = var(difference)) %>%
pull(variation)
ggplot(data = stroop_wide) +
aes(y = difference) +
geom_boxplot() +
theme_classic() +
xlab("") +
ylab("Difference in RT between conditions") +
theme(axis.title.y = element_text(size = 15))
var_resp$variance[1]
var_resp$variance[2]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
# Part 1 ------------------------------------------------------------------
# sample size by group
size_1 <- 40
# mean by group
mu <- c(100, 110)
# standard deviation by group
sigma <- c(3, 3)
# simulate iq group 1
group_1 <- round(x = rnorm(n = size_1, mean = mu[1], sd = sigma[1]),
digits = 0)
# simulate iq group 2
group_2 <- round(x = rnorm(n = size_1, mean = mu[2], sd = sigma[2]),
digits = 0)
# write as a dataframe
coffee <- data.frame("iq" = c(group_1,group_2),
"group" = c(rep("no_coffee",size_1),
rep("coffee", size_1)))
# save as csv file
write_csv(x = coffee, file = "hw-2-problem-1.csv")
# Part 2 ------------------------------------------------------------------
# sample size by group
size_2 <- 100
# mean
mu <- 100
# standard deviation
sigma <- 5
# response times before training
control <- rnorm(n = size_2, mean = mu + 2, sd = sigma)
# simulate response times for control condition
experiment <- rnorm(n = size_2, mean = mu, sd = sigma)
# write as a data frame
response_time <- data.frame("response_time_before" = control,
"response_time_after" = c(experiment),
"group" = c(rep("experimental",size_2)))
# save as csv file
write_csv(x = response_time, file = "hw-2-problem-2.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Simulations used on homework 3
library(tidyverse)
# nap time and memory -----------------------------------------------------
mu_control <- rep(x = 0.6, times = 45)
mu_15 <- rep(x = 0.67, times = 45)
mu_60 <- rep(x = 0.71, times = 45)
recalled <- rbinom(n = 3 * 45, size = 40, prob = c(mu_control, mu_15, mu_60))
free_recall <- tibble("id" = as.character(x = seq(1, 3 * 45)),
"recalled" = as.integer(recalled),
"condition" = rep(c("control", "15_min", "60_min"),
each = 45))
write_csv(x = free_recall, file = "homework3-p1.csv")
#### Simulations Used on homework 4 ----
# memory: gender and word frequency ---------------------------------------
mu <- c(9,13,
15,10)
writen <- rbinom(n = 25*4, size = 20, prob = rep(x = mu/20, each = 25))
memory <- tibble("id" = as.character(x = seq(1, 100)),
"recalled" = as.integer(writen),
"task" = rep(c("free_recall", "recognition"), each = 50),
"word_frequency" = rep(rep(c("low", "high"),
each = 25), times = 2))
write_csv(x = memory, file = "homework4.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# simulation homework 5 ---------------------------------------------------
library(tidyverse)
eff_hr_nomiss <- 2
eff_hr_miss <- -1
intercept <- 70
diff_miss <- - 2
study_hr <- round(rgamma(n = 100, shape = 6, rate = 2),1)
missed <- rbinom(n = 100, size = 1, prob = 0.4) * rpois(n = 100, lambda = 5)
grade <- round(intercept + diff_miss * as.numeric(missed>0) +
eff_hr_nomiss * study_hr +
eff_hr_miss * as.numeric(missed>0) * study_hr +
rnorm(n = 100, mean = 0, sd = 4),1)
stats_grades <- tibble("grade" = grade,
"study_week" = study_hr,
"classes_missed" = missed)
write_csv(x = stats_grades, file = "homework5.csv")
ggplot(data = stats_grades, aes(x = study_week, y = grade,
color = classes_missed == 0)) +
geom_point() +
geom_smooth(method = lm, formula = y~x)
BIC(lm(grade~study_week + classes_missed, data = stats_grades))
BIC(lm(grade~study_week + (classes_missed > 0), data = stats_grades))
BIC(lm(grade~study_week + (classes_missed > 0) + (classes_missed > 0) * study_week,
data = stats_grades))
# install tinytex package
install.packages('tinytex')
#install tinytex to be able to generate pdf files
tinytex::install_tinytex()
library(tidyverse)
library(tinytex)
library(tinytex)
library(tidyverse)
library(tinytex)
library(tidyverse)
library(tinytex)
a <- 1+1
a
## Section 1
**Background:** This first data set comes from an experiment intended to test whether drinking coffee makes people smarter. Participants were divided into two groups. All participants took an IQ test, but participants in **group 1** drank water 5 minutes before the test, while participants in **group 2** drank coffee.
library(tidyverse)
library(tinytex)
# In this chunk, you should write (i.e., copy from the slides) the code needed to load the data for section 1. Remember to delete the comments inside the code chunks BEFORE submitting your homework.
# In this chunk, you should write (i.e., copy from the slides) the code needed to load the data for section 1. Remember to delete the comments inside the code chunks BEFORE submitting your homework.
a <- 1+1
# In this chunk, you should write (i.e., copy from the slides) the code needed to load the data for section 1. Remember to delete the comments inside the code chunks BEFORE submitting your homework.
a <- 1+4
a
a <- 45
a <- a + 2
a <- 65
a
a <- 45
a <- a + 2
a
a
View(memory)
memory$recalled[4]
memory$recalled[4]
memory$recalled
